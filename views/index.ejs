<!DOCTYPE html>
<html>
<head>
<title>–ß–∞—Å—Ç–∏—Ü—ã</title>
<style>
  body {
    margin: 0;
    overflow: hidden;
    background-color: #222;
    touch-action: manipulation; /* –ó–∞–ø—Ä–µ—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∂–µ—Å—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
  }
  canvas {
    display: block;
  }
</style>
</head>
<body>
<canvas id="canvas"></canvas>

<script>

const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');

let width = canvas.width = window.innerWidth;
let height = canvas.height = window.innerHeight;

const particles = [];
const numParticles = 60;
const mouse = { x: 0, y: 0, isMoving: false };

window.addEventListener('mousemove', (event) => {
  mouse.x = event.clientX;
  mouse.y = event.clientY;
  mouse.isMoving = true;
});

window.addEventListener('mouseout', () => {
  mouse.isMoving = false;
});

window.addEventListener('touchmove', (event) => {
  event.preventDefault();
  mouse.x = event.touches[0].clientX;
  mouse.y = event.touches[0].clientY;
  mouse.isMoving = true;
});

window.addEventListener('touchend', () => {
  mouse.isMoving = false;
});

const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min)) + min;

const str1 = 'üòÄüòÅüòÇü§£üòÉüòÑüòÖüòÜüòáüòàüòâüòäüòãüòéüòçüòòüòóüòôüòöüôÇü§óü§©ü§îü§®üòêüòëüò∂üôÑüòèüò£üò•üòÆüòØüò™üò´üò¥ü•±üòåüòõüòúüòùü§êüòíüòìüòîüòïüôÉü§ëüò≤üò≥üòµüò±ü•µü•∂üò∞üòÆüò¶üòßüò®üò©üò¢üò•ü§§üò™üòìüòµüòøüòæüôÄüòºüòπüòªüòèüòàüëπüë∫üí©üëªüëΩüéÉ';

const str2 = 'üåçüåèüåêüåëüåíüåìüåîüåïüåñüåóüåòüåôüåöüåõüåúüåùüåûüåüüå†üå≠üåÆüåØüå∞üå±üå≤üå≥üå¥üåµüå∑üå∏üåπüå∫üåªüåº'



const emojis = [...str1+str2];

const getRandomEmoji = () => emojis[getRandomInt(0, emojis.length)];

const generateRandomEmojis = (count) => Array.from({ length: count }, getRandomEmoji);

const words = generateRandomEmojis(20);

class Particle {
  constructor(x, y, size, text) {
    this.x = x;
    this.y = y;
    this.size = size;
    
    this.baseX = x;
    this.baseY = y;
    this.density = Math.random() * 30 + 1;
    this.velocityX = (Math.random() - 0.5) * 3;
    this.velocityY = (Math.random() - 0.5) * 3;
    this.text = text;
    this.angle = 0;
    this.angularSpeed = (Math.random() - 0.5) * 0.1;
  }
  draw() {
    
    ctx.font = `${this.size}px Arial`;
    ctx.textAlign = 'center';
    ctx.translate(this.x, this.y);
    ctx.rotate(this.angle);
    ctx.fillText(this.text, 0, 0);
    ctx.rotate(-this.angle);
    ctx.translate(-this.x, -this.y);
  }
  update() {
    if (mouse.isMoving) {
      let dx = mouse.x - this.x;
      let dy = mouse.y - this.y;
      let distance = Math.sqrt(dx * dx + dy * dy);
      if (distance < 100) {
        let force = (100 - distance) / 100;
        this.x -= dx / distance * force * this.density;
        this.y -= dy / distance * force * this.density;
      }
    }

    this.x += this.velocityX;
    this.y += this.velocityY;

    // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
    if (this.x + this.size > width || this.x - this.size < 0) {
      this.velocityX *= -1;
      this.angularSpeed *= -1; 
    }
    if (this.y + this.size > height || this.y - this.size < 0) {
      this.velocityY *= -1;
      this.angularSpeed *= -1; 
    }

    this.x = Math.max(this.size, Math.min(this.x, width - this.size));
    this.y = Math.max(this.size, Math.min(this.y, height - this.size));

    // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç–∏—Ü–∞–º–∏
    for (let i = 0; i < particles.length; i++) {
      if (this !== particles[i]) {
        let dx = this.x - particles[i].x;
        let dy = this.y - particles[i].y;
        let distance = Math.sqrt(dx * dx + dy * dy);
        let combinedRadius = this.size + particles[i].size;

        if (distance < combinedRadius) {
          // –ï—Å–ª–∏ —á–∞—Å—Ç–∏—Ü—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, –∏—Ö –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
          let collisionVector = { x: dx, y: dy };
          let collisionVectorMagnitude = Math.sqrt(collisionVector.x * collisionVector.x + collisionVector.y * collisionVector.y);
          collisionVector.x /= collisionVectorMagnitude;
          collisionVector.y /= collisionVectorMagnitude;

          let overlap = combinedRadius - distance;
          this.x += collisionVector.x * overlap / 2;
          this.y += collisionVector.y * overlap / 2;
          particles[i].x -= collisionVector.x * overlap / 2;
          particles[i].y -= collisionVector.y * overlap / 2;

          // –ò–∑–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —á–∞—Å—Ç–∏—Ü –ø–æ—Å–ª–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è (–º–æ–∂–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏)
          this.velocityX += collisionVector.x * 0.5;
          this.velocityY += collisionVector.y * 0.5;
          particles[i].velocityX -= collisionVector.x * 0.5;
          particles[i].velocityY -= collisionVector.y * 0.5;

          this.angularSpeed *= -1;
          particles[i].angularSpeed *= -1; 
        }
      }
    }

    this.angle += this.angularSpeed;
  }
}

function init() {
  particles.length = 0;
  for (let i = 0; i < numParticles; i++) {
    let size = getRandomInt(30, 60);
    let x = getRandomInt(0, width);
    let y = getRandomInt(0, height);
    
    let text = words[getRandomInt(0, words.length)];
    particles.push(new Particle(x, y, size, text));
  }
}

function handleResize() {
  width = canvas.width = window.innerWidth;
  height = canvas.height = window.innerHeight;
  init();
}

window.addEventListener('resize', handleResize);

function animate() {
  ctx.clearRect(0, 0, width, height);
  particles.forEach(particle => {
    particle.draw();
    particle.update();
  });
  requestAnimationFrame(animate);
}

init();
animate();
</script>
</body>
</html>
