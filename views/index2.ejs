<!DOCTYPE html>
<html>
<head>
<title>–ß–∞—Å—Ç–∏—Ü—ã</title>
<style>
  body {
    margin: 0;
    overflow: hidden;
    background-color: #222;
    touch-action: manipulation; /* –ó–∞–ø—Ä–µ—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∂–µ—Å—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
  }
  canvas {
    display: block;
  }
</style>
</head>
<body>
<canvas id="canvas"></canvas>

<script>

import * as PIXI from 'pixijs'

const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');

let width = canvas.width = window.innerWidth;
let height = canvas.height = window.innerHeight;

const particles = [];
const numParticles = 60;
const mouse = { x: 0, y: 0, isMoving: false };

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Pixi.js –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —á–∞—Å—Ç–∏—Ü
const app = new PIXI.Application({
  view: canvas,
  backgroundAlpha: 0,
});

window.addEventListener('mousemove', (event) => {
  mouse.x = event.clientX;
  mouse.y = event.clientY;
  mouse.isMoving = true;
});

window.addEventListener('mouseout', () => {
  mouse.isMoving = false;
});

window.addEventListener('touchmove', (event) => {
  event.preventDefault();
  mouse.x = event.touches[0].clientX;
  mouse.y = event.touches[0].clientY;
  mouse.isMoving = true;
});

window.addEventListener('touchend', () => {
  mouse.isMoving = false;
});

const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min)) + min;

const str1 = 'üòÄüòÅüòÇü§£üòÉüòÑüòÖüòÜüòáüòàüòâüòäüòãüòéüòçüòòüòóüòôüòöüôÇü§óü§©ü§îü§®üòêüòëüò∂üôÑüòèüò£üò•üòÆüòØüò™üò´üò¥ü•±üòåüòõüòúüòùü§êüòíüòìüòîüòïüôÉü§ëüò≤üò≥üòµüò±ü•µü•∂üò∞üòÆüò¶üòßüò®üò©üò¢üò•ü§§üò™üòìüòµüòøüòæüôÄüòºüòπüòªüòèüòàüëπüë∫üí©üëªüëΩüéÉ';

const str2 = 'üåçüåèüåêüåëüåíüåìüåîüåïüåñüåóüåòüåôüåöüåõüåúüåùüåûüåüüå†üå≠üåÆüåØüå∞üå±üå≤üå≥üå¥üåµüå∑üå∏üåπüå∫üåªüåº'



const emojis = [...str1+str2];

const getRandomEmoji = () => emojis[getRandomInt(0, emojis.length)];

const generateRandomEmojis = (count) => Array.from({ length: count }, getRandomEmoji);

const words = generateRandomEmojis(20);

class Particle extends PIXI.Sprite {
  constructor(x, y, size, text) {
    super(PIXI.Texture.EMPTY); // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø—Ä–∞–π—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞
    
    this.x = x;
    this.y = y;
    this.size = size;
    
    this.baseX = x;
    this.baseY = y;
    this.density = Math.random() * 30 + 1;
    this.velocityX = (Math.random() - 0.5) * 3;
    this.velocityY = (Math.random() - 0.5) * 3;
    this.text = text;
    this.angle = 0;
    this.angularSpeed = (Math.random() - 0.5) * 0.1;
    
    this.updateText(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–π—Ç–∞
    
    app.stage.addChild(this);
  }
  
  updateText() {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é PIXI.Text
    const textStyle = new PIXI.TextStyle({
      fontFamily: 'Arial',
      fontSize: this.size,
      fill: 0xffffff, // –ë–µ–ª—ã–π —Ü–≤–µ—Ç
      align: 'center',
    });
    const text = new PIXI.Text(this.text, textStyle);
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø—Ä–∞–π—Ç–∞ –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    this.texture = app.renderer.generateTexture(text);
  }

  update() {
    if (mouse.isMoving) {
      let dx = mouse.x - this.x;
      let dy = mouse.y - this.y;
      let distance = Math.sqrt(dx * dx + dy * dy);
      if (distance < 100) {
        let force = (100 - distance) / 100;
        this.x -= dx / distance * force * this.density;
        this.y -= dy / distance * force * this.density;
      }
    }

    this.x += this.velocityX;
    this.y += this.velocityY;

    if (this.x + this.size > width || this.x - this.size < 0) {
      this.velocityX *= -1;
      this.angularSpeed *= -1; // –ò–∑–º–µ–Ω—è–µ–º —É–≥–ª–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π
    }
    if (this.y + this.size > height || this.y - this.size < 0) {
      this.velocityY *= -1;
      this.angularSpeed *= -1; // –ò–∑–º–µ–Ω—è–µ–º —É–≥–ª–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π
    }

    this.x = Math.max(this.size, Math.min(this.x, width - this.size));
    this.y = Math.max(this.size, Math.min(this.y, height - this.size));

    for (let i = 0; i < particles.length; i++) {
      if (this !== particles[i]) {
        let dx = this.x - particles[i].x;
        let dy = this.y - particles[i].y;
        let distance = Math.sqrt(dx * dx + dy * dy);
        if (distance < 100) {
          let force = (100 - distance) / 100;
          this.x += dx / distance * force * this.density;
          this.y += dy / distance * force * this.density;
          this.angularSpeed *= -1; // –ò–∑–º–µ–Ω—è–µ–º —É–≥–ª–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å –¥—Ä—É–≥–æ–π —á–∞—Å—Ç–∏—Ü–µ–π
        }
      }
    }

    this.angle += this.angularSpeed;
    
    // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç
    this.rotation = this.angle;
  }
}

function init() {
  particles.length = 0;
  for (let i = 0; i < numParticles; i++) {
    let size = getRandomInt(30, 60);
    let x = getRandomInt(0, width);
    let y = getRandomInt(0, height);
    
    let text = words[getRandomInt(0, words.length)];
    particles.push(new Particle(x, y, size, text));
  }
}

function handleResize() {
  width = canvas.width = window.innerWidth;
  height = canvas.height = window.innerHeight;
  app.renderer.resize(width, height);
  init();
}

window.addEventListener('resize', handleResize);

function animate() {
  app.stage.children.forEach(particle => {
    particle.update();
  });
  app.render();
  requestAnimationFrame(animate);
}

init();
animate();
</script>
</body>
</html>
